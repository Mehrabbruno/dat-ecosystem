module.exports = scrollbar

const path = require('path')
const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const sm_icon_button_alt = require('buttons/sm_icon_button_alt')


const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

function scrollbar(opts, protocol){

    const {data} = opts

    let content_scrollHeight, content_clientHeight, content_scrollTop;
    
    const [notify, setScrollTop] = protocol(handle_scroll, listen)
    function listen(message){
        const { sh, ch, st } = message
        content_clientHeight = ch;
        content_scrollHeight = sh;
        content_scrollTop = st;
    }

    // Assigning all the icons
    const { img_src: { 
        icon_arrow_down = `${prefix}/icon_arrow_down.svg`,
        icon_arrow_up = `${prefix}/icon_arrow_up.svg`
    } } = data

    const el = document.createElement('div')
    el.classList.add('container')
    el.style.cssText = `
        width: 32px;
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        border:1px solid var(--primary_color);
    `
    const shadow = el.attachShadow({ mode: 'closed'})
    shadow.innerHTML = `
        <div class="bar_wrapper">
            <div class="bar"> </div>
        </div>
        <div class="arrow_up_wrapper"> </div>
        <div class="arrow_down_wrapper"> </div>
        <style> ${get_theme} </style>
    `
    const bar = shadow.querySelector('.bar')
    let lastPageY;
    let isMouseDown = false
    bar.onmousedown = handle_mousedown;
    function handle_mousedown(e){
        lastPageY = e.pageY;
        isMouseDown = true;
    }
    bar.onmousemove = handle_mousemove;
    function handle_mousemove(e){
        if(isMouseDown){
            notify()
            // console.log(content_scrollHeight, content_clientHeight)
            const delta = e.pageY - lastPageY;
            lastPageY = e.pageY;
            const ratio = content_clientHeight / content_scrollHeight
            // console.log(delta)
            setScrollTop(content_scrollTop + delta / ratio)
        }
    }
    bar.onmouseup = handle_mouseup;
    bar.onmouseleave = handle_mouseup;
    function handle_mouseup(){
        isMouseDown = false;
    }

    window.onresize = handle_scroll;
    function handle_scroll(e){
        notify()
        const ratio = content_clientHeight / content_scrollHeight
        if(ratio >= 1) 
            el.style.cssText = 'display: none;'

        console.log(content_scrollHeight, content_clientHeight, ratio)
        // bar.style.height = `${Math.max(ratio * 118, 10)}%`
        // bar.style.top = `${(content_scrollTop / content_scrollHeight) * 500}%`
        bar.style.cssText = 'height:' + Math.max(ratio * 100, 10) + '%; top:' + (content_scrollTop / content_scrollHeight ) * 100 + '%;'
        // if(content_scrollHeight / bar.offsetTop < 4.7){
        //     bar.style.marginTop = `${content_scrollHeight / 4.7}px`
        // }
    }

    window.requestAnimationFrame(handle_scroll);
    

    const arrow_down_btn = sm_icon_button_alt({src: icon_arrow_down, src_active: icon_arrow_down})
    const arrow_down_wrapper = shadow.querySelector('.arrow_down_wrapper')
    arrow_down_wrapper.append(arrow_down_btn)
    arrow_down_wrapper.onclick = () => {
        notify()
        const ratio = content_clientHeight / content_scrollHeight
        setScrollTop(content_scrollTop + 30 / ratio)
    }

    const arrow_up_btn = sm_icon_button_alt({src: icon_arrow_up, src_active: icon_arrow_up})
    const arrow_up_wrapper = shadow.querySelector('.arrow_up_wrapper')
    arrow_up_wrapper.append(arrow_up_btn)
    arrow_up_wrapper.onclick = () => {
        notify()
        const ratio = content_clientHeight / content_scrollHeight
        setScrollTop(content_scrollTop - 30 / ratio)
    }

    shadow.adoptedStyleSheets = [ sheet ]
    return el;
}

function get_theme() {
    return `
        .bar_wrapper{
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        .bar {
            position: relative;
            background-color: var(--primary_color);
            width: 30px;
            cursor: pointer;
            opacity: 1;
            transition: opacity 0.25s linear;
            box-shadow:inset 0px 0px 0px 1px #fff;
            
        }
        .bar:hover {
            opacity: 1;
            cursor: pointer
        }
        .bar:active {
            -o-user-select: none;
            -ms-user-select: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
        }
    `
}